apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller-controller
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller
    app.kubernetes.io/component: controller
    version: 1.2.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/part-of: nginx-ingress-controller
  replicas: 2
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      annotations:
        diun.enable: "true"
        diun.regopt: docker.io
        diun.watch_repo: "true"
        diun.include_tags: "^\\d+\\.\\d+\\.\\d+-debian-\\d+-r\\d+$"
      labels:
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/part-of: nginx-ingress-controller
        app.kubernetes.io/component: controller
        version: 1.2.0
    spec:
      serviceAccountName: nginx-ingress-controller-controller
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 60
      containers:
        - name: controller
          image: bitnami/nginx-ingress-controller:1.2.0
          args:
            - /nginx-ingress-controller
            - --default-backend-service=infrastructure/nginx-ingress-controller-nginx
            - --publish-service=infrastructure/nginx-ingress-controller-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --tcp-services-configmap=infrastructure/nginx-ingress-controller-tcp-services
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              add:
                - NET_BIND_SERVICE
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              protocol: TCP
              containerPort: 80
            - name: https
              protocol: TCP
              containerPort: 443
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /healthz
              port: 10254
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /healthz
              port: 10254
          resources:
            limits: {}
            requests: {}
